#!/usr/bin/env bash
## Builds new aur packages into repo 'aurto' (run as root)
## Should be in the same dir as `check-aurto-git`
set -Eeuo pipefail

readonly AURVCS=${AURVCS:-.*-(cvs|svn|git|hg|bzr|darcs)$}

if [[ $EUID -ne 0 ]]; then
  # retry as root
  exec sudo "$0" "$@"
fi

lib_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
user=$(cat /usr/lib/aurto/user)
# shellcheck source=./shared-functions disable=SC1091
source "$lib_dir/shared-functions"

if [ -z "$user" ]; then
  echo 'Missing /usr/lib/aurto/user' >&2
  exit 1
fi

## Clean aurutils cache, if no aurto-add sessions are running
clean_aurutils_cache() {
  user_home=$(getent passwd "$user" | cut -d: -f6)
  aurutils_cache=$user_home/.cache/aurutils/sync/
  if [ -d "$aurutils_cache" ] && ! compgen -G "$user_home/.cache/aurto/aurto-add.*" >/dev/null; then
    rm -rf "$aurutils_cache"
  fi
}
trap clean_aurutils_cache ERR


pacsync aurto >/dev/null || true


modify=$(last_pkg_modify)

# shellcheck disable=SC2154
echo "Running: aur sync --no-view --no-confirm --database=aurto\
 --makepkg-conf=/etc/aurto/makepkg-chroot.conf $chroot_arg\
 --pacman-conf=/etc/aurto/pacman-chroot.conf --upgrades" >&2
sudo -u "$user" \
 aur sync --no-view --no-confirm --database=aurto \
  --makepkg-conf=/etc/aurto/makepkg-chroot.conf "$chroot_arg" \
  --pacman-conf=/etc/aurto/pacman-chroot.conf --upgrades

if rm "$lib_dir/check-vcs" 2>/dev/null; then
  vcs_pkgs=$(aur repo --database=aurto --list | cut -f1 | grep -E "$AURVCS" || true)
  if [ -n "$vcs_pkgs" ]; then
    echo "Checking $(echo "$vcs_pkgs" | wc -l) VCS packages matching $(yellow "$AURVCS") for updates..." >&2
    # init vcs sync cache (aurutils v3 args with ||-fallback to v2 args)
    sudo -u "$user" \
     aur sync "$vcs_pkgs" \
      --no-ver-argv --no-build --no-view --database=aurto >/dev/null 2>&1 \
    || sudo -u "$user" \
     aur sync "$vcs_pkgs" \
      --no-ver-shallow --print --database=aurto >/dev/null 2>&1

    mapfile -t git_outdated < <(sudo -u "$user" "$lib_dir"/aur-vercmp-devel --database=aurto | cut -d: -f1)
    if [ ${#git_outdated[@]} -gt 0 ]; then
      sudo -u "$user" aurto remove "${git_outdated[@]}"
      sudo -u "$user" aurto add "${git_outdated[@]}"
    else
      echo " VCS packages up to date $(green âœ“)" >&2
    fi
  fi
fi

pacsync aurto || true
paccache -rk1 -c /var/cache/pacman/aurto

# Run the post hook if present
if [ -f /etc/aurto/post-hook ]; then
  bash /etc/aurto/post-hook
fi

after_modify=$(last_pkg_modify)
if [ "${after_modify:-0}" != "${modify:-0}" ]; then
  ## prompt listeners to `/var/lib/pacman/local` that something has changed
  ## E.g. RaphaelRochet/arch-update
  touch /var/lib/pacman/local/aurto-arch-update
fi
